<%- include('layout', { body: `
<div class="container mx-auto px-6 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-semibold text-gray-800">Configurar Menus</h1>
        <button onclick="showAddMenuModal()" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <i class="fas fa-plus mr-2"></i>Novo Menu
        </button>
    </div>

    <!-- Menus List -->
    <div class="space-y-6" id="menusList">
        <!-- Menus will be loaded here -->
    </div>

    <!-- Add/Edit Menu Modal -->
    <div id="menuModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md bg-white">
            <div class="modal-content">
                <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4" id="modalTitle">Adicionar Novo Menu</h3>
                <form id="menuForm" class="space-y-4">
                    <input type="hidden" id="menuIndex" value="">
                    <input type="hidden" id="menuPath" value="">
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Nome do Menu</label>
                        <input type="text" id="menuName" required
                            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700">Texto do Menu</label>
                        <textarea id="menuText" rows="4" required
                            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>

                    <div id="activationSection">
                        <label class="block text-sm font-medium text-gray-700">Ativado quando</label>
                        <select id="menuActivation" 
                            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="newChat">Iniciar conversa nova</option>
                            <option value="message">Quando enviar:</option>
                            <option value="contains">Quando a mensagem incluir:</option>
                        </select>
                        <div id="activationTextInput" class="mt-2 hidden">
                            <input type="text" placeholder="Digite o texto de ativação"
                                class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                    </div>

                    <div class="pt-5">
                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeMenuModal()" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-500">
                                Cancelar
                            </button>
                            <button type="submit" 
                                class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md">
                                Salvar Menu
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
let currentMenus = [];

function showAddMenuModal(parentPath = '') {
    document.getElementById('modalTitle').textContent = 'Adicionar Novo Menu';
    document.getElementById('menuForm').reset();
    document.getElementById('menuIndex').value = '';
    document.getElementById('menuPath').value = parentPath;
    
    const isSubmenu = parentPath !== '';
    document.getElementById('activationSection').style.display = isSubmenu ? 'none' : 'block';
    
    document.getElementById('menuModal').classList.remove('hidden');
}

function showEditMenuModal(menuPath) {
    const pathParts = menuPath.split('/').map(Number);
    let currentMenu = currentMenus[pathParts[0]];
    let currentPath = \`\${pathParts[0]}\`;
    
    for (let i = 1; i < pathParts.length; i++) {
        currentMenu = currentMenu.submenus[pathParts[i]];
        currentPath += \`/\${pathParts[i]}\`;
    }

    document.getElementById('modalTitle').textContent = 'Editar Menu';
    document.getElementById('menuName').value = currentMenu.name;
    document.getElementById('menuText').value = currentMenu.text;
    document.getElementById('menuIndex').value = pathParts[pathParts.length - 1];
    document.getElementById('menuPath').value = pathParts.slice(0, -1).join('/');

    const isSubmenu = pathParts.length > 1;
    const activationSection = document.getElementById('activationSection');
    activationSection.style.display = isSubmenu ? 'none' : 'block';

    if (!isSubmenu && currentMenu.ative !== false) {
        if (currentMenu.ative.includes(':')) {
            document.getElementById('menuActivation').value = 'message';
        } else if (currentMenu.ative) {
            document.getElementById('menuActivation').value = 'contains';
        }
        document.getElementById('activationTextInput').classList.remove('hidden');
        document.querySelector('#activationTextInput input').value = currentMenu.ative;
    }

    document.getElementById('menuModal').classList.remove('hidden');
}

function closeMenuModal() {
    document.getElementById('menuModal').classList.add('hidden');
}

function renderMenu(menu, path = '') {
    const isSubmenu = path !== '';
    const hasSubmenus = menu.submenus && menu.submenus.length > 0;
    
    return \`
        <div class="bg-white rounded-lg shadow-md p-6 \${isSubmenu ? 'ml-8' : ''} relative">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-800">\${menu.name}</h3>
                    <p class="text-sm text-gray-500">
                        Ativado quando: \${
                            isSubmenu ? 'Submenu' :
                            !menu.ative ? 'Menu Principal' :
                            menu.ative
                        }
                    </p>
                </div>
                <div class="space-x-2">
                    <button onclick="showEditMenuModal('\${path}')" 
                        class="text-indigo-600 hover:text-indigo-800">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="deleteMenu('\${path}')" 
                        class="text-red-600 hover:text-red-800">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            
            <div class="text-gray-600 mb-4">
                \${menu.text}
            </div>

            <div class="space-y-4">
                <div class="flex items-center justify-between">
                    <h4 class="text-sm font-medium text-gray-700">Submenus</h4>
                    <button onclick="showAddMenuModal('\${path}')" 
                        class="text-sm text-indigo-600 hover:text-indigo-800">
                        <i class="fas fa-plus mr-1"></i>Adicionar Submenu
                    </button>
                </div>
                
                \${hasSubmenus ? 
                    menu.submenus.map((submenu, index) => 
                        renderMenu(submenu, \`\${path ? path + '/' : ''}\${index}\`)
                    ).join('') :
                    '<p class="text-sm text-gray-500">Nenhum submenu configurado</p>'
                }
            </div>
        </div>
    \`;
}

function renderMenus() {
    const menusList = document.getElementById('menusList');
    
    if (currentMenus.length === 0) {
        menusList.innerHTML = \`
            <div class="text-center py-12">
                <p class="text-gray-500">Nenhum menu configurado. Clique em "Novo Menu" para começar.</p>
            </div>
        \`;
        return;
    }
    
    menusList.innerHTML = currentMenus.map((menu, index) => renderMenu(menu, \`\${index}\`)).join('');
}

async function loadMenus() {
    try {
        const response = await axios.get('/api/menus');
        currentMenus = response.data;
        
        // Ensure main menu exists
        if (currentMenus.length === 0) {
            const mainMenu = {
                name: 'Menu Principal',
                type: 'sub',
                text: 'Digite o texto do menu aqui',
                ative: false,
                submenus: [],
                back: false
            };
            
            const response = await axios.post('/api/menus', mainMenu);
            currentMenus = [response.data];
        }
        
        renderMenus();
    } catch (error) {
        console.error('Error loading menus:', error);
        alert('Erro ao carregar menus. Por favor, recarregue a página.');
    }
}

document.getElementById('menuActivation').addEventListener('change', (e) => {
    const textInput = document.getElementById('activationTextInput');
    if (e.target.value === 'newChat') {
        textInput.classList.add('hidden');
    } else {
        textInput.classList.remove('hidden');
    }
});

document.getElementById('menuForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const name = document.getElementById('menuName').value;
    const text = document.getElementById('menuText').value;
    const parentPath = document.getElementById('menuPath').value;
    const index = document.getElementById('menuIndex').value;
    
    let ative = false;
    if (!parentPath) {
        const activationType = document.getElementById('menuActivation').value;
        if (activationType !== 'newChat') {
            ative = document.querySelector('#activationTextInput input').value;
            if (activationType === 'message') {
                ative = \`:\${ative}\`;
            }
        }
    }
    
    const menuData = {
        name,
        type: 'sub',
        text,
        ative,
        submenus: [],
        back: parentPath || false
    };
    
    try {
        if (index === '') {
            // Adding new menu
            if (parentPath) {
                // Adding submenu
                const pathParts = parentPath.split('/').map(Number);
                let currentMenu = currentMenus[pathParts[0]];
                for (let i = 1; i < pathParts.length; i++) {
                    currentMenu = currentMenu.submenus[pathParts[i]];
                }
                currentMenu.submenus.push(menuData);
                await axios.put(\`/api/menus/\${pathParts[0]}\`, currentMenus[pathParts[0]]);
            } else {
                // Adding top-level menu
                const response = await axios.post('/api/menus', menuData);
                currentMenus.push(response.data);
            }
        } else {
            // Editing existing menu
            const pathParts = (parentPath ? parentPath + '/' : '').split('/').map(Number);
            if (pathParts.length > 0 && pathParts[0].toString() !== 'NaN') {
                let currentMenu = currentMenus[pathParts[0]];
                for (let i = 1; i < pathParts.length; i++) {
                    currentMenu = currentMenu.submenus[pathParts[i]];
                }
                currentMenu.submenus[index] = menuData;
                await axios.put(\`/api/menus/\${pathParts[0]}\`, currentMenus[pathParts[0]]);
            } else {
                currentMenus[index] = menuData;
                await axios.put(\`/api/menus/\${index}\`, menuData);
            }
        }
        
        closeMenuModal();
        renderMenus();
    } catch (error) {
        console.error('Error saving menu:', error);
        alert('Erro ao salvar menu. Por favor, tente novamente.');
    }
});

async function deleteMenu(path) {
    if (!confirm('Tem certeza que deseja apagar este menu?')) return;

    try {
        const pathParts = path.split('/').map(Number);
        if (pathParts.length === 1) {
            // Deleting top-level menu
            await axios.delete(\`/api/menus/\${pathParts[0]}\`);
            currentMenus.splice(pathParts[0], 1);
        } else {
            // Deleting submenu
            let currentMenu = currentMenus[pathParts[0]];
            for (let i = 1; i < pathParts.length - 1; i++) {
                currentMenu = currentMenu.submenus[pathParts[i]];
            }
            currentMenu.submenus.splice(pathParts[pathParts.length - 1], 1);
            await axios.put(\`/api/menus/\${pathParts[0]}\`, currentMenus[pathParts[0]]);
        }
        renderMenus();
    } catch (error) {
        console.error('Error deleting menu:', error);
        alert('Erro ao apagar menu. Por favor, tente novamente.');
    }
}

// Load initial menus
loadMenus();
</script>
` }) %>